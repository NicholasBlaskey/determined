// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	model "github.com/determined-ai/determined/master/pkg/model"
)

// TrialAuthZ is an autogenerated mock type for the TrialAuthZ type
type TrialAuthZ struct {
	mock.Mock
}

// CanCompleteTrialsSearcherValidation provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanCompleteTrialsSearcherValidation(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetTrial provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanGetTrial(curUser model.User, _a1 *model.Trial) (bool, error) {
	ret := _m.Called(curUser, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) bool); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User, *model.Trial) error); ok {
		r1 = rf(curUser, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanGetTrialLogs provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanGetTrialLogs(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetTrialsCheckpoints provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanGetTrialsCheckpoints(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetTrialsProfilerAvailableSeries provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanGetTrialsProfilerAvailableSeries(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetTrialsProfilerMetrics provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanGetTrialsProfilerMetrics(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetTrialsSearcherOperation provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanGetTrialsSearcherOperation(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetTrialsSummary provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanGetTrialsSummary(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetTrialsWorkloads provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanGetTrialsWorkloads(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanKillTrial provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanKillTrial(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanPostTrialsProfilerMetricsBatch provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanPostTrialsProfilerMetricsBatch(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanPostTrialsRunnerMetadata provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanPostTrialsRunnerMetadata(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanReportTrialsProgress provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanReportTrialsProgress(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanReportTrialsSearcherEarlyExit provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanReportTrialsSearcherEarlyExit(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanReportTrialsTrainingMetrics provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanReportTrialsTrainingMetrics(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanReportTrialsValidationMetrics provides a mock function with given fields: curUser, _a1
func (_m *TrialAuthZ) CanReportTrialsValidationMetrics(curUser model.User, _a1 *model.Trial) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Trial) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTrialAuthZ interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrialAuthZ creates a new instance of TrialAuthZ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrialAuthZ(t mockConstructorTestingTNewTrialAuthZ) *TrialAuthZ {
	mock := &TrialAuthZ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
